{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { calcTotalPrice } from './utils/calc-total-price';\nimport { getCartFromCookies } from './utils/get-cart-from-cookies';\nimport { findUserData } from '../user/asyncActions'; // const initialState: ICartSliceState = getCartFromCookies();\n\nconst initialState = {\n  items: [],\n  totalPrice: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItem(state, action) {\n      const findItem = state.items.find(item => item.id === action.payload.id);\n      if (findItem) findItem.count++;else state.items.push({ ...action.payload,\n        count: 1\n      });\n      state.totalPrice = calcTotalPrice(state.items);\n    },\n\n    replaceItems(state, action) {\n      state.items = action.payload;\n      state.totalPrice = calcTotalPrice(state.items);\n    },\n\n    minusItem(state, action) {\n      const findItem = state.items.find(item => item.id === action.payload);\n      if (findItem) findItem.count--;\n      state.totalPrice = calcTotalPrice(state.items);\n    },\n\n    removeItem(state, action) {\n      state.items = state.items.filter(item => item.id !== action.payload);\n      state.totalPrice = calcTotalPrice(state.items);\n    },\n\n    clearItems(state) {\n      state.items = [];\n      state.totalPrice = 0;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(findUserData.fulfilled, (state, action) => {\n      const {\n        items,\n        totalPrice\n      } = getCartFromCookies(action.payload.id);\n      state.items = items;\n      state.totalPrice = totalPrice;\n    });\n  }\n});\nexport const {\n  addItem,\n  replaceItems,\n  minusItem,\n  removeItem,\n  clearItems\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","calcTotalPrice","getCartFromCookies","findUserData","initialState","items","totalPrice","cartSlice","name","reducers","addItem","state","action","findItem","find","item","id","payload","count","push","replaceItems","minusItem","removeItem","filter","clearItems","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["/Users/kirillkarpakov/WebstormProjects/client-pr/src/store/cart/slice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ICartItem, ICartSliceState } from './types';\nimport { calcTotalPrice } from './utils/calc-total-price';\nimport { getCartFromCookies } from './utils/get-cart-from-cookies';\nimport { findUserData } from '../user/asyncActions';\n\n\n// const initialState: ICartSliceState = getCartFromCookies();\nconst initialState: ICartSliceState = {\n\titems: [],\n\ttotalPrice: 0\n};\n\nconst cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState,\n\treducers: {\n\t\taddItem(state, action: PayloadAction<ICartItem>) {\n\t\t\tconst findItem = state.items.find(item => item.id === action.payload.id);\n\n\t\t\tif (findItem)\n\t\t\t\tfindItem.count++;\n\t\t\telse\n\t\t\t\tstate.items.push({...action.payload, count: 1});\n\n\t\t\tstate.totalPrice = calcTotalPrice(state.items);\n\t\t},\n\n\t\treplaceItems(state, action: PayloadAction<ICartItem[]>) {\n\t\t\tstate.items = action.payload;\n\t\t\tstate.totalPrice = calcTotalPrice(state.items);\n\t\t},\n\n\t\tminusItem(state, action: PayloadAction<number>) {\n\t\t\tconst findItem = state.items.find(item => item.id === action.payload);\n\n\t\t\tif (findItem)\n\t\t\t\tfindItem.count--;\n\n\t\t\tstate.totalPrice = calcTotalPrice(state.items);\n\t\t},\n\n\t\tremoveItem(state, action: PayloadAction<number>) {\n\t\t\tstate.items = state.items.filter(item => item.id !== action.payload);\n\t\t\tstate.totalPrice = calcTotalPrice(state.items);\n\t\t},\n\n\t\tclearItems(state) {\n\t\t\tstate.items = [];\n\t\t\tstate.totalPrice = 0;\n\t\t}\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(findUserData.fulfilled, (state, action) => {\n\t\t\tconst {items, totalPrice} = getCartFromCookies(action.payload.id);\n\t\t\tstate.items = items;\n\t\t\tstate.totalPrice = totalPrice;\n\t\t});\n\t}\n});\n\nexport const {addItem, replaceItems, minusItem, removeItem, clearItems} = cartSlice.actions;\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,YAAT,QAA6B,sBAA7B,C,CAGA;;AACA,MAAMC,YAA6B,GAAG;EACrCC,KAAK,EAAE,EAD8B;EAErCC,UAAU,EAAE;AAFyB,CAAtC;AAKA,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,MADuB;EAE7BJ,YAF6B;EAG7BK,QAAQ,EAAE;IACTC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAA0C;MAChD,MAAMC,QAAQ,GAAGF,KAAK,CAACN,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAAP,CAAeD,EAApD,CAAjB;MAEA,IAAIH,QAAJ,EACCA,QAAQ,CAACK,KAAT,GADD,KAGCP,KAAK,CAACN,KAAN,CAAYc,IAAZ,CAAiB,EAAC,GAAGP,MAAM,CAACK,OAAX;QAAoBC,KAAK,EAAE;MAA3B,CAAjB;MAEDP,KAAK,CAACL,UAAN,GAAmBL,cAAc,CAACU,KAAK,CAACN,KAAP,CAAjC;IACA,CAVQ;;IAYTe,YAAY,CAACT,KAAD,EAAQC,MAAR,EAA4C;MACvDD,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACK,OAArB;MACAN,KAAK,CAACL,UAAN,GAAmBL,cAAc,CAACU,KAAK,CAACN,KAAP,CAAjC;IACA,CAfQ;;IAiBTgB,SAAS,CAACV,KAAD,EAAQC,MAAR,EAAuC;MAC/C,MAAMC,QAAQ,GAAGF,KAAK,CAACN,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAA5C,CAAjB;MAEA,IAAIJ,QAAJ,EACCA,QAAQ,CAACK,KAAT;MAEDP,KAAK,CAACL,UAAN,GAAmBL,cAAc,CAACU,KAAK,CAACN,KAAP,CAAjC;IACA,CAxBQ;;IA0BTiB,UAAU,CAACX,KAAD,EAAQC,MAAR,EAAuC;MAChDD,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYkB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAA9C,CAAd;MACAN,KAAK,CAACL,UAAN,GAAmBL,cAAc,CAACU,KAAK,CAACN,KAAP,CAAjC;IACA,CA7BQ;;IA+BTmB,UAAU,CAACb,KAAD,EAAQ;MACjBA,KAAK,CAACN,KAAN,GAAc,EAAd;MACAM,KAAK,CAACL,UAAN,GAAmB,CAAnB;IACA;;EAlCQ,CAHmB;EAuC7BmB,aAAa,EAAGC,OAAD,IAAa;IAC3BA,OAAO,CAACC,OAAR,CAAgBxB,YAAY,CAACyB,SAA7B,EAAwC,CAACjB,KAAD,EAAQC,MAAR,KAAmB;MAC1D,MAAM;QAACP,KAAD;QAAQC;MAAR,IAAsBJ,kBAAkB,CAACU,MAAM,CAACK,OAAP,CAAeD,EAAhB,CAA9C;MACAL,KAAK,CAACN,KAAN,GAAcA,KAAd;MACAM,KAAK,CAACL,UAAN,GAAmBA,UAAnB;IACA,CAJD;EAKA;AA7C4B,CAAD,CAA7B;AAgDA,OAAO,MAAM;EAACI,OAAD;EAAUU,YAAV;EAAwBC,SAAxB;EAAmCC,UAAnC;EAA+CE;AAA/C,IAA6DjB,SAAS,CAACsB,OAA7E;AACP,eAAetB,SAAS,CAACuB,OAAzB"},"metadata":{},"sourceType":"module"}
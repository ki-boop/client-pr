{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { payByTerminalKey } from './asyncActions';\nimport { Status } from '../types';\nconst initialState = {\n  status: Status.NEVER,\n  errorMessage: null\n};\nconst paySlice = createSlice({\n  name: 'pay',\n  initialState,\n  reducers: {\n    clearPayState(state) {\n      state.status = Status.NEVER;\n      state.errorMessage = null;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(payByTerminalKey.fulfilled, state => {\n      state.status = Status.SUCCESS;\n      state.errorMessage = null;\n    });\n    builder.addCase(payByTerminalKey.pending, state => {\n      state.status = Status.LOADING;\n      state.errorMessage = null;\n    });\n    builder.addCase(payByTerminalKey.rejected, (state, action) => {\n      state.status = Status.ERROR;\n      state.errorMessage = action.error.message;\n    });\n  }\n});\nexport const {\n  clearPayState\n} = paySlice.actions;\nexport default paySlice.reducer;","map":{"version":3,"names":["createSlice","payByTerminalKey","Status","initialState","status","NEVER","errorMessage","paySlice","name","reducers","clearPayState","state","extraReducers","builder","addCase","fulfilled","SUCCESS","pending","LOADING","rejected","action","ERROR","error","message","actions","reducer"],"sources":["/Users/kirillkarpakov/WebstormProjects/client-pr/src/store/pay/slice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { IPaySliceState, PayStateErrorMessages } from './types';\nimport { payByTerminalKey } from './asyncActions';\nimport { Status } from '../types';\n\n\nconst initialState: IPaySliceState = {\n\tstatus: Status.NEVER,\n\terrorMessage: null\n};\n\nconst paySlice = createSlice({\n\tname: 'pay',\n\tinitialState,\n\treducers: {\n\t\tclearPayState(state) {\n\t\t\tstate.status = Status.NEVER;\n\t\t\tstate.errorMessage = null;\n\t\t}\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(payByTerminalKey.fulfilled, (state) => {\n\t\t\tstate.status = Status.SUCCESS;\n\t\t\tstate.errorMessage = null;\n\t\t});\n\n\t\tbuilder.addCase(payByTerminalKey.pending, (state) => {\n\t\t\tstate.status = Status.LOADING;\n\t\t\tstate.errorMessage = null;\n\t\t});\n\n\t\tbuilder.addCase(payByTerminalKey.rejected, (state, action) => {\n\t\t\tstate.status = Status.ERROR;\n\t\t\tstate.errorMessage = action.error.message as PayStateErrorMessages;\n\t\t});\n\t}\n});\n\nexport const {clearPayState} = paySlice.actions;\nexport default paySlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,MAAMC,YAA4B,GAAG;EACpCC,MAAM,EAAEF,MAAM,CAACG,KADqB;EAEpCC,YAAY,EAAE;AAFsB,CAArC;AAKA,MAAMC,QAAQ,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,KADsB;EAE5BL,YAF4B;EAG5BM,QAAQ,EAAE;IACTC,aAAa,CAACC,KAAD,EAAQ;MACpBA,KAAK,CAACP,MAAN,GAAeF,MAAM,CAACG,KAAtB;MACAM,KAAK,CAACL,YAAN,GAAqB,IAArB;IACA;;EAJQ,CAHkB;EAS5BM,aAAa,EAAGC,OAAD,IAAa;IAC3BA,OAAO,CAACC,OAAR,CAAgBb,gBAAgB,CAACc,SAAjC,EAA6CJ,KAAD,IAAW;MACtDA,KAAK,CAACP,MAAN,GAAeF,MAAM,CAACc,OAAtB;MACAL,KAAK,CAACL,YAAN,GAAqB,IAArB;IACA,CAHD;IAKAO,OAAO,CAACC,OAAR,CAAgBb,gBAAgB,CAACgB,OAAjC,EAA2CN,KAAD,IAAW;MACpDA,KAAK,CAACP,MAAN,GAAeF,MAAM,CAACgB,OAAtB;MACAP,KAAK,CAACL,YAAN,GAAqB,IAArB;IACA,CAHD;IAKAO,OAAO,CAACC,OAAR,CAAgBb,gBAAgB,CAACkB,QAAjC,EAA2C,CAACR,KAAD,EAAQS,MAAR,KAAmB;MAC7DT,KAAK,CAACP,MAAN,GAAeF,MAAM,CAACmB,KAAtB;MACAV,KAAK,CAACL,YAAN,GAAqBc,MAAM,CAACE,KAAP,CAAaC,OAAlC;IACA,CAHD;EAIA;AAxB2B,CAAD,CAA5B;AA2BA,OAAO,MAAM;EAACb;AAAD,IAAkBH,QAAQ,CAACiB,OAAjC;AACP,eAAejB,QAAQ,CAACkB,OAAxB"},"metadata":{},"sourceType":"module"}